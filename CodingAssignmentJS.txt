// Problem 1: Complete the secondLargest function which takes in an array of numbers in input and return the second biggest number in the array. (without using sort)?
function secondLargest(array) {
    if(array.length < 2) return null;

    let largest = -Infinity;
    let second = -Infinity;

    for (let i = 0; i < array.length; i++) {
        if (array[i] > largest) {
            second = largest;
            largest = array[i];
        } else if (array[i] > second && array[i] < largest) {
            second = array[i];
        }
    }

    return second;
}
// Problem 2: Complete the calculateFrequency function that takes lowercase string as input and returns frequency of all english alphabet. (using only array, no in-built function)

function calculateFrequency(string) {
    let freq = new Array(26); 
    for (let i = 0; i < 26; i++) {
        freq[i] = 0;
    }

    for (let i = 0; i < string.length; i++) {
        let xyz = string.charCodeAt(i);
        if (xyz >= 97 && xyz <= 122) { 
            freq[xyz - 97] += 1;
        }
    }

    return freq;
}


// Problem 3: Complete the flatten function that takes a JS Object, returns a JS Object in flatten format (compressed)
const flattenObject = (obj) => {
    let result = {};

    for (const i in obj) {
        if (typeof obj[i] === "object" && !Array.isArray(obj[i])){
            const temp = flattenObject(obj[i]);
            for (const j in temp){
                result [i+ "." +j] = temp [j];
            }
        }
        else {
            result [i] = obj[i];
        }
    }
    return result;
}; 
const obj = {
    A: "12",
    B: 23,
    C: {
        P: 23,
        O:{
            L:26
        },
        Q: {
            R: 34
        }
    }
};
console.log(flatten(obj));


// Problem 4: Complete the unflatten function that takes a JS Object, returns a JS Object in unflatten format  let unflattenObject = (data) => {
    let result = {};
    for (let i in data) {
      let keys = i.split(".");
      keys.reduce((acc, value, index) => {
        return (
          acc[value] ||
          (acc[value] = isNaN(Number(keys[index + 1]))? keys.length - 1 === index ? data[i] : {} : [])
        );
      }, result);
    }
    return result;
  };
  console.log(JSON.stringify(unflattenObject(object), null, 4));

